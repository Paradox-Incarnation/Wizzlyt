---
description:
globs:
alwaysApply: false
---
# Component Architecture Guide

## Main Application Components

### Core App Structure
- [App.tsx](mdc:entrypoints/content/App.tsx): Main application container with draggable window, theme switching, and mode management
- [index.tsx](mdc:entrypoints/content/index.tsx): Content script entry point with YouTube integration and transcript extraction

### Feature Components
- [Chat.tsx](mdc:entrypoints/content/components/Chat.tsx): AI chat interface with Google Gemini integration
- [MicrophoneControls.tsx](mdc:entrypoints/content/components/MicrophoneControls.tsx): Voice interaction controls
- [NoteModal.tsx](mdc:entrypoints/content/components/NoteModal.tsx): Note-taking modal with screenshot capture
- [NotesLibrary.tsx](mdc:entrypoints/content/components/NotesLibrary.tsx): Notes management and organization
- [StreamingTranscription.tsx](mdc:entrypoints/content/components/StreamingTranscription.tsx): Real-time transcription display

### UI Components
Located in [entrypoints/content/components/ui/](mdc:entrypoints/content/components/ui/):
- [button.tsx](mdc:entrypoints/content/components/ui/button.tsx): Reusable button component with variants
- [dialog.tsx](mdc:entrypoints/content/components/ui/dialog.tsx): Modal dialog components
- [card.tsx](mdc:entrypoints/content/components/ui/card.tsx): Card layout components
- [input.tsx](mdc:entrypoints/content/components/ui/input.tsx): Form input components
- [textarea.tsx](mdc:entrypoints/content/components/ui/textarea.tsx): Text area components

## Component Patterns

### Theme Support
All components support dark/light theme switching using the global theme state from Zustand store.

### State Management
- Global state managed with Zustand in [store/store.ts](mdc:entrypoints/store/store.ts)
- Notes state managed separately in [content/store/notesStore.ts](mdc:entrypoints/content/store/notesStore.ts)

### Context Providers
- [LiveAPIContext.tsx](mdc:entrypoints/contexts/LiveAPIContext.tsx): Google Live API integration
- [ChatAPIContext.tsx](mdc:entrypoints/contexts/ChatAPIContext.tsx): Chat API management

## Development Guidelines

### Component Creation
- Use TypeScript for all components
- Implement proper prop interfaces
- Support theme switching via theme prop or context
- Follow the established naming conventions
- Use Tailwind CSS for styling with CSS variables for theming

### File Organization
- Place reusable UI components in `components/ui/`
- Feature-specific components go in `components/`
- Keep components focused on single responsibilities
- Export components as default exports
